@inherits LayoutComponentBase
@attribute [Authorize]
@inject IDbContextFactory<AppDbContext> _dbContextFactory
@inject NavigationManager _navigationManager

<CascadingValue Name="@Constants.CascadingParameters.CURRENT_ACCOUNT" Value="@_user">
    <Toasts @ref="_toasts" />
    <CascadingValue Name="@Constants.CascadingParameters.MAIN_LAYOUT" Value="this">
        <div class="flex flex-row">
            <div class="my-shadow w-1/6 min-h-screen">
                <NavMenu />
            </div>

            <main class="w-full px-8 pt-4">
                @Body
            </main>
        </div>

        <div id="blazor-error-ui">
            An unhandled error has occurred.
            <a href="" class="reload">Reload</a>
            <a class="dismiss">🗙</a>
        </div>
    </CascadingValue>
</CascadingValue>


@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    private Toasts? _toasts;

    private User? _user { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (AuthenticationStateTask != null)
        {
            var authState = await AuthenticationStateTask;

            if (authState.User?.Identity?.IsAuthenticated == true)
            {
                using var db = _dbContextFactory.CreateDbContext();
                _user = await db.Users
                    .SingleOrDefaultAsync(x => x.Email != null && x.Email.Equals(authState.User.Identity.Name));

                if (_user is not null)
                    return;

                _navigationManager.NavigateTo("account/login", true);
            }
        }

        _navigationManager.NavigateTo("account/login", true);
    }

    public void RunToast(Toast toast)
    {
        _toasts?.RunToast(toast);
    }
}