@page "/room/queue"
@attribute [Authorize]
@inject IDbContextFactory<AppDbContext> _dbContextFactory
@inject NavigationManager _navigationManager

@if(_room is null)
{
    <Spinner/>
} else
{
    <h1>@(_room?.Name ?? Id.ToString())&nbsp;-&nbsp;Queue</h1>
    <div class="w-full border-b-2 border-slate-200 px-4 py-2 grid grid-cols-12 gap-2">
        <h3 class="col-span-2">Order</h3>
        <h3 class="col-span-6">Phone</h3>
        <h3 class="col-span-4 text-right">Actions</h3>
    </div>
    foreach(var queuedUser in _room.QueuedUsers.Where(x => x.QueueState.Equals(QueueState.Waiting)).OrderBy(x => x.Order))
    {
        <div class="w-full border-b-2 border-slate-200 px-4 py-2 grid grid-cols-12 gap-2">
            <div class="col-span-2">
                @queuedUser.Order
            </div>
            <div class="col-span-6">
                @queuedUser.PhoneNumber
            </div>
            <div class="col-start-11">
                <button class="w-full cursor-pointer font-normal hover:text-contrast smooth-change" @onclick="async () => await MarkAsAsync(queuedUser, QueueState.NotHere)">
                    <i class="fi fi-rr-user-slash"></i>
                </button>
            </div>
            <div class="col-start-12 w-full">
                <button class="w-full cursor-pointer font-normal hover:text-contrast smooth-change" @onclick="async () => await MarkAsAsync(queuedUser, QueueState.Finished)">
                    <i class="fi fi-rr-user-check"></i>
                </button>
            </div>
            
        </div>
    }
}

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [CascadingParameter(Name = Constants.CascadingParameters.CURRENT_ACCOUNT)]
    public required User _user { get; set; }

    [CascadingParameter(Name = Constants.CascadingParameters.MAIN_LAYOUT)]
    public required MainLayout _mainLayout { get; set; }

    private Room? _room;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        using var db = _dbContextFactory.CreateDbContext();

        _room = await db.Rooms
            .Include(x => x.RoomAdmins)
            .Include(x => x.QueuedUsers)
                .ThenInclude(x => x.User)
            .AsNoTracking()
            .FirstOrDefaultAsync(x => x.Id.Equals(Id));

        if (_room is null)
        {
            _mainLayout.RunToast(new("Žiadaná miestnosť už neexistuje.", ToastType.Fail));
            _navigationManager.NavigateTo("/");
            return;
        }

        var currentRoomAdmin = _room.RoomAdmins.FirstOrDefault(x => x.UserId.Equals(_user.Id));

        if (currentRoomAdmin is null)
        {
            _mainLayout.RunToast(new("Nie ste správcom tejto miestnosti.", ToastType.Fail));
            _navigationManager.NavigateTo("/");
            return;
        }

        StateHasChanged();
    }

    private async Task MarkAsAsync(QueuedUser queuedUser, QueueState queueState)
    {
        using var db = _dbContextFactory.CreateDbContext();

        var targetQueuedUser = await db.QueuedUsers.FirstAsync(x => x.Id.Equals(queuedUser.Id));

        targetQueuedUser.QueueState = queueState;

        await db.SaveChangesAsync();

        queuedUser.QueueState = queueState;

        StateHasChanged();
    }
}