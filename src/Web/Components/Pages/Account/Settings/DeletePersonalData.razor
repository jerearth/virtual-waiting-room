@page "/settings/delete-personal-data"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity

@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<DeletePersonalData> Logger

<PageTitle>Delete Personal Data</PageTitle>

<StatusMessage Message="@message" />

<h3>Delete Personal Data</h3>

<div class="border-2 rounded-xl border-red-500 bg-red-50 text-red-500 px-4 py-2 mt-4">
    <i class="fi fi-rr-exclamation"></i>
    &nbsp;Deleting this data will permanently remove your account, and this cannot be recovered.
</div>

<EditForm Model="Input" FormName="delete-user" OnValidSubmit="OnValidSubmitAsync" method="post">
    <DataAnnotationsValidator />
    <div class="flex flex-col space-y-4 mt-8">
        @if (requirePassword)
        {
            <div class="flex flex-col space-y-2">
                <label for="password" class="form-label">Password</label>
                <InputText type="password" @bind-Value="Input.Password" class="my-input" autocomplete="current-password"
                    aria-required="true" placeholder="Please enter your password." />
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
        }
        <button class="w-full text-center py-2 px-4 bg-red-100 rounded-full text-red-800 hover:bg-red-800 hover:text-white" type="submit">
            Delete data and close my account
        </button>
    </div>
</EditForm>

@code {
    private string? message;
    private User user = default!;
    private bool requirePassword;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Input ??= new();
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        requirePassword = await UserManager.HasPasswordAsync(user);
    }

    private async Task OnValidSubmitAsync()
    {
        if (requirePassword && !await UserManager.CheckPasswordAsync(user, Input.Password))
        {
            message = "Error: Incorrect password.";
            return;
        }

        var result = await UserManager.DeleteAsync(user);
        if (!result.Succeeded)
        {
            throw new InvalidOperationException("Unexpected error occurred deleting user.");
        }

        await SignInManager.SignOutAsync();

        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("User with ID '{UserId}' deleted themselves.", userId);

        RedirectManager.RedirectToCurrentPage();
    }

    private sealed class InputModel
    {
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";
    }
}
