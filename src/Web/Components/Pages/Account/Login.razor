@page "/account/login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity

@inject SignInManager<User> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="w-full min-h-screen pt-12">
    <div class="w-1/3 mx-auto flex flex-col space-y-8">
        <div class="border-2 rounded-xl border-yellow-500 bg-yellow-50 text-yellow-500 px-4 py-2 my-shadow">
            <i class="fi fi-rr-exclamation"></i>
            &nbsp;Use a local account to log in.
        </div>
        
        <StatusMessage Message="@errorMessage" />
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            <div class="my-shadow rounded-xl p-6 flex flex-col space-y-4">
                <h1>Log in to your account</h1>
                <ValidationSummary class="text-danger" role="alert" />
                <div class="flex flex-col space-y-2">
                    <label for="email" class="form-label">Email</label>
                    <InputText @bind-Value="Input.Email" class="my-input" autocomplete="username" aria-required="true"
                        placeholder="name@example.com" />
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="flex flex-col space-y-2">
                    <label for="password" class="form-label">Password</label>
                    <InputText type="password" @bind-Value="Input.Password" class="my-input" autocomplete="current-password"
                        aria-required="true" placeholder="password" />
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="checkbox mb-3">
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                        Remember me
                    </label>
                </div>
                <div class="flex flex-col space-y-2 justify-center">
                    <button type="submit" class="btn-primary">Log in</button>
                    <a href="account/forgot-password" class="mx-auto">Forgot your password?</a>
                </div>
            </div>
            
            <div class="flex flex-row justify-between px-6 py-4">
                <a href="@(NavigationManager.GetUriWithQueryParameters("account/create-account", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                <a href="account/resend-email-confirmation">Resend email confirmation</a>
            </div>
        </EditForm>
    </div>
</div>


@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure:
        false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("account/lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
