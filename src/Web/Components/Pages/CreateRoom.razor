@page "/create-room"
@attribute [Authorize]
@inject IDbContextFactory<AppDbContext> _dbContextFactory
@inject NavigationManager _navigationManager

<PageTitle>@StringHelper.GetCreateOrEditAction(Id is null) miestnosť</PageTitle>

<EditForm Model="_createRoomModel" OnValidSubmit="OnSubmitAsync">
    <DataAnnotationsValidator />
    <h1>@StringHelper.GetCreateOrEditAction(Id is null) miestnosť</h1>

    @if(_createRoomModel is null)
    {
        <Spinner/>
    } else {
        <div class="flex flex-col space-y-8 w-1/3">

            <div class="flex flex-col space-y-2">
                <label for="name">Názov miestnosti</label>
                <InputText @bind-Value="_createRoomModel.Name" class="my-input" autocomplete="room-name" placeholder="Všeobecná ambulancia" />
                <ValidationMessage For="() => _createRoomModel.Name" class="text-danger" />
            </div>

            <div class="form-checkbox">
                <InputCheckbox @bind-Value="_createRoomModel.AppearInSearch" />
                <label for="appear-in-search">Zobraziť vo vyhľadávaní</label>
                <ValidationMessage For="() => _createRoomModel.AppearInSearch" class="text-danger" />
            </div>

            <div class="flex flex-col space-y-4">
                <div class="form-checkbox">
                    <InputCheckbox @bind-Value="_createRoomModel.EnableDailyLimit" />
                    <label for="enable-daily-limit">Obmedziť denný počet návštevníkov</label>
                </div>

                @if (_createRoomModel.EnableDailyLimit)
                {
                    <div class="flex flex-col space-y-2">
                        <label for="daily-limit">Denný limit</label>
                        <InputNumber @bind-Value="_createRoomModel.DailyLimit" class="my-input" autocomplete="room-daily-limit" placeholder="1" />
                        <ValidationMessage For="() => _createRoomModel.DailyLimit" class="text-danger" />
                    </div>
                }
            </div>

            <div class="flex flex-col space-y-4">
                <div class="form-checkbox">
                    <InputCheckbox @bind-Value="_createRoomModel.RequirePassword" />
                    <label for="require-password">Vyžadovať heslo</label>
                </div>

                @if (_createRoomModel.RequirePassword)
                {
                    <div class="flex flex-col space-y-2">
                        <label for="daily-limit">Heslo</label>
                        <InputText @bind-Value="_createRoomModel.Password" class="my-input" autocomplete="password" />
                        <ValidationMessage For="() => _createRoomModel.Password" class="text-danger" />
                    </div>
                }
            </div>

            <div class="form-checkbox">
                <InputCheckbox @bind-Value="_createRoomModel.RequireConfirmation" />
                <label for="require-confirmation">Vyžadovať potvrdenie od každej osoby pre prístup</label>
            </div>

            <div class="flex flex-col space-y-2">
                <label for="notes">Poznámky pre zákazníkov/klientov</label>
                <InputText @bind-Value="_createRoomModel.Notes" class="my-input" autocomplete="notes" placeholder="Prosíme pred vstupom si pripraviť ..." />
                <ValidationMessage For="() => _createRoomModel.Notes" class="text-danger" />
            </div>

            <button type="submit" class="w-100 btn btn-lg btn-primary">@StringHelper.GetCreateOrEditAction(Id is null)</button>
        </div>
    }
</EditForm>

@code {
    [SupplyParameterFromQuery]
    public int? Id { get; set; }

    [CascadingParameter(Name = Constants.CascadingParameters.CURRENT_ACCOUNT)]
    public required User _user { get; set; }

    [CascadingParameter(Name = Constants.CascadingParameters.MAIN_LAYOUT)]
    public required MainLayout _mainLayout { get; set; }

    private CreateRoomModel? _createRoomModel = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(!firstRender)
            return;

        if (Id is not null)
        {
            using var db = _dbContextFactory.CreateDbContext();

            var targetRoom = await db.Rooms.AsNoTracking().FirstOrDefaultAsync(x => x.Id.Equals(Id));

            if (targetRoom is null)
            {
                _mainLayout.RunToast(new($"Miestnosť ktorú sa snažíte upraviť už neexistuje, môžete pokračovať vo vytváraní novej miestnosti.", ToastType.Fail));
                Id = null;
                return;
            }

            _createRoomModel = new()
                {
                    Name = targetRoom.Name,
                    Notes = targetRoom.Notes,
                    DailyLimit = targetRoom.DailyLimit,
                    EnableDailyLimit = targetRoom.DailyLimit.HasValue,
                    Password = targetRoom.Password ?? string.Empty,
                    RequirePassword = !string.IsNullOrEmpty(targetRoom.Password),
                    AppearInSearch = targetRoom.AppearInSearch,
                    RequireConfirmation = targetRoom.RequireConfirmation
                };

        }
        else
            _createRoomModel = new();
        StateHasChanged();
    }

    private async Task OnSubmitAsync()
    {
        if(_createRoomModel is null)
            return;

        using var db = _dbContextFactory.CreateDbContext();

        int? dailyLimit = _createRoomModel.DailyLimit is null ? null : _createRoomModel.DailyLimit.Value;

        if (Id is null)
        {
            var room = new Room()
                {
                    Name = _createRoomModel.Name,
                    SearchName = _createRoomModel.Name.NormalizeForSearch(),
                    DailyLimit = dailyLimit,
                    Notes = _createRoomModel.Notes,
                    AppearInSearch = _createRoomModel.AppearInSearch,
                    Password = !_createRoomModel.RequirePassword ? null : _createRoomModel.Password,
                    RequireConfirmation = _createRoomModel.RequireConfirmation
                };

            room.RoomAdmins.Add(new()
                {
                    Room = room,
                    UserId = _user.Id
                });

            db.Rooms.Add(room);

            await db.SaveChangesAsync();

            _mainLayout.RunToast(new($"Nová miestnosť s názvom {_createRoomModel.Name} bola úspešne vytvorená.", ToastType.Success));
            _navigationManager.NavigateTo($"/room/detail?id={room.Id}");
        } else
        {
            var targetRoom = await db.Rooms.FirstAsync(x => x.Id.Equals(Id));

            targetRoom.Name = _createRoomModel.Name;
            targetRoom.SearchName = _createRoomModel.Name.NormalizeForSearch();
            targetRoom.DailyLimit = _createRoomModel.DailyLimit;
            targetRoom.Notes = _createRoomModel.Notes;
            targetRoom.AppearInSearch = _createRoomModel.AppearInSearch;
            targetRoom.Password = !_createRoomModel.RequirePassword ? null : _createRoomModel.Password;
            targetRoom.RequireConfirmation = _createRoomModel.RequireConfirmation;

            await db.SaveChangesAsync();

            _mainLayout.RunToast(new($"Miestnosť s názvom {_createRoomModel.Name} bola úspešne upravená.", ToastType.Success));
            _navigationManager.NavigateTo($"/room/detail?id={Id}");
        }
    }

    private class CreateRoomModel
    {
        [Required(AllowEmptyStrings = false)]
        public string Name { get; set; } = string.Empty;

        [Range(1, 1000)]
        public int? DailyLimit { get; set; }

        public bool EnableDailyLimit { get; set; }

        public string? Notes { get; set; }

        public bool AppearInSearch { get; set; }

        public bool RequirePassword { get; set; }

        public string Password { get; set; } = string.Empty;

        public bool RequireConfirmation { get; set; }
    }
}