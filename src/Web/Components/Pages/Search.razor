@page "/search"
@using System.Timers
@inject IDbContextFactory<AppDbContext> _dbContextFactory
@implements IDisposable

<PageTitle>Search</PageTitle>

<h3>Search</h3>

<SearchBar SearchObject="miestnosti" OnInputChanged="UpdateSearchTerm"/>

@if (_rooms is null)
{
    <Spinner />
}
else if (!_rooms.Any())
{
    <h5>Žiadne miestnosti nezodpovedajú vyhľadávaniu</h5>
}
else
{
    foreach (var room in _rooms)
    {
        <RoomListItem Room="room" IsUserAdmin="false"/>
    }

    <PagingElement CurrentPage="_currentPage"
                   ElementCount="_roomCount"
                   OnPageChanged="(pageNumber) => {
                _currentPage = pageNumber;
                FilterRooms();
            }" />
}

@code {
    [CascadingParameter(Name = Constants.CascadingParameters.CURRENT_ACCOUNT)]
    public required User _user { get; set; }

    private Timer? _timer;
    private List<Room>? _rooms;
    private string? _searchTerm;
    private int _currentPage = 1;
    private int _roomCount = 0;
    private CancellationToken _cancellationToken = new CancellationToken();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        _timer = new Timer(Constants.Times.DEBOUNCE_TIME);
        _timer.Stop();
        _timer.Elapsed += FilterRooms;
        _timer.AutoReset = false;

        FilterRooms();
    }

    private void UpdateSearchTerm(ChangeEventArgs e)
    {
        _searchTerm = e.Value as string;

        _timer?.Stop();
        _timer?.Start();
    }

    private async void FilterRooms(Object? obj = null, ElapsedEventArgs? e = null)
    {
        if (e is not null)
            _currentPage = 1;

        _rooms = null;
        await InvokeAsync(StateHasChanged);

        using var db = _dbContextFactory.CreateDbContext();
        var queryableRooms = db.Rooms.Where(x => x.AppearInSearch).AsNoTracking();

        if (!string.IsNullOrWhiteSpace(_searchTerm))
            queryableRooms = queryableRooms.Where(x => x.SearchName.Contains(_searchTerm.NormalizeForSearch()));

        _roomCount = await queryableRooms.CountAsync();

        queryableRooms = queryableRooms.OrderBy(x => x.Name);
        queryableRooms = queryableRooms.Skip(Constants.Limits.MAX_ITEMS_PER_PAGE * (_currentPage - 1)).Take(Constants.Limits.MAX_ITEMS_PER_PAGE);

        _rooms = await queryableRooms.ToListAsync(_cancellationToken);

        await InvokeAsync(StateHasChanged);
    }

    void IDisposable.Dispose()
        => _timer?.Dispose();
}
